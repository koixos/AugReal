//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/ARInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ARInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ARInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ARInputActions"",
    ""maps"": [
        {
            ""name"": ""AR Controller"",
            ""id"": ""d3f3df75-20a3-41b8-8c1e-b08ab16b21e7"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""a234b780-08a5-448c-a24d-7d775d7f71d3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""49917dfa-006d-4d80-aa62-0b8b9fafcd8a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""906fae7f-5547-4f8b-8e5c-f565279c8781"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scale"",
                    ""type"": ""Value"",
                    ""id"": ""eec71b17-0c41-454d-98e2-1f873abe677c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""14880349-72db-47d3-96c1-1d8a0783a2ec"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dac9945-8827-44d9-a95c-dc55beb7ceac"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8fa470c1-e275-4e36-96cd-9faaab9e644a"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c4d082a-efdf-451d-9068-beac67c1fec6"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // AR Controller
        m_ARController = asset.FindActionMap("AR Controller", throwIfNotFound: true);
        m_ARController_Select = m_ARController.FindAction("Select", throwIfNotFound: true);
        m_ARController_Position = m_ARController.FindAction("Position", throwIfNotFound: true);
        m_ARController_Rotate = m_ARController.FindAction("Rotate", throwIfNotFound: true);
        m_ARController_Scale = m_ARController.FindAction("Scale", throwIfNotFound: true);
    }

    ~@ARInputActions()
    {
        UnityEngine.Debug.Assert(!m_ARController.enabled, "This will cause a leak and performance issues, ARInputActions.ARController.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AR Controller
    private readonly InputActionMap m_ARController;
    private List<IARControllerActions> m_ARControllerActionsCallbackInterfaces = new List<IARControllerActions>();
    private readonly InputAction m_ARController_Select;
    private readonly InputAction m_ARController_Position;
    private readonly InputAction m_ARController_Rotate;
    private readonly InputAction m_ARController_Scale;
    public struct ARControllerActions
    {
        private @ARInputActions m_Wrapper;
        public ARControllerActions(@ARInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_ARController_Select;
        public InputAction @Position => m_Wrapper.m_ARController_Position;
        public InputAction @Rotate => m_Wrapper.m_ARController_Rotate;
        public InputAction @Scale => m_Wrapper.m_ARController_Scale;
        public InputActionMap Get() { return m_Wrapper.m_ARController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ARControllerActions set) { return set.Get(); }
        public void AddCallbacks(IARControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_ARControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ARControllerActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Scale.started += instance.OnScale;
            @Scale.performed += instance.OnScale;
            @Scale.canceled += instance.OnScale;
        }

        private void UnregisterCallbacks(IARControllerActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Scale.started -= instance.OnScale;
            @Scale.performed -= instance.OnScale;
            @Scale.canceled -= instance.OnScale;
        }

        public void RemoveCallbacks(IARControllerActions instance)
        {
            if (m_Wrapper.m_ARControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IARControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_ARControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ARControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ARControllerActions @ARController => new ARControllerActions(this);
    public interface IARControllerActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnScale(InputAction.CallbackContext context);
    }
}
